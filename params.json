{"name":"Fluent Page","tagline":"","body":"Fluent Page for Selenium/Thucydides\r\n===================================\r\n\r\nFluent Page is a Selenium/Thucydides PageObject extension adding a bit more functionality to your average PageObject.\r\nBy making a PageObject extend `net.jockx.fluentpage.Page` class you can easily chain assertions, logging statements and\r\nPageObject's own methods while keeping reference to the page currently processed by WebDriver method calls.\r\n\r\nFeatures:\r\n---------\r\n- Handle Page Factory initiation automatically - no need to provide constructors for pageObjects\r\n- Static access to all your `PageObject` instances\r\n```java\r\nPage.get(SomePageObject.class);\r\nPage.navigateTo(SomePageObject.class);\r\nPage.waitForPage(SomePageObject.class);\r\n```\r\n- Fluent access to logger and assertions\r\n```java\r\nPage.navigateTo(SomePage.class)\r\n    .clickButton()\r\n    .assertion.assertTrue(condition, \"Message\")\r\n    .logger.info(\"Some logging statement\")\r\n    .clickAnotherButton()\r\n```\r\nUsage:\r\n------\r\n- Declare class the following way:\r\n```java\r\npublic class MyPageObject extends Page<MyPageObject>\r\n```\r\n- Optionally override navigateTo() and waitToLoad()\r\n- Return a reference to one of your PageObjects from any action method call\r\n```java\r\nPageB clickGoToPageB(){\r\n    gotoPageB.click();\r\n    return Page.waitForPage(PageB.class);\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}